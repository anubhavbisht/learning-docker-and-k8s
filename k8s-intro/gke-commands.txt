# ---------------------------- setting up cluster ---------------------------- #
Click the Hamburger menu on the top left-hand side of the dashboard.

Click Kubernetes Engine

Click the ENABLE button to enable the Kubernetes API for this project.

After a few minutes of waiting, clicking the bell icon in the top right part of the menu should show a green checkmark for Enable services: container.googleapis.com

If you refresh the page it should show a screen to create your first cluster. If not, click the hamburger menu and select Kubernetes Engine and then Clusters.
Once you see the screen below, click the CREATE button.

A Create Cluster dialog will open and default to Autopilot. You must make sure to click the SWITCH TO STANDARD CLUSTER option. Autopilot is not supported by this course and is a very different tool.

A form similar to the one shown in the video will be presented. Set the Name to multi-cluster (step 1). Confirm that the Zone set is actually near your location (step 2). The Node Pool that is discussed in the video is now found in a separate dropdown on the left sidebar. Click the downward-facing arrow to view the settings. No changes are needed here (step 3). Finally, click the CREATE button at the bottom of the form (step 4).

After a few minutes, the cluster dashboard should load and your multi-cluster should have a green checkmark in the table.
**************************************************************************************************************************************
to integrate gke with travis
to generate a Service Account.

Click the Hamburger menu on the top left-hand side of the dashboard, find IAM & Admin, and select Service Accounts. Then click the CREATE SERVICE ACCOUNT button.



In the form that is displayed, set the Service account name to travis-deployer (step 1), then click the CREATE button (step 2).


Click in the Select a role filter and scroll down to select Kubernetes Engine and then Kubernetes Engine Admin.




Make sure the filter now shows Kubernetes Engine Admin and then click CONTINUE


The Grant users access form is optional and should be skipped. Click the DONE button.


You should now see a table listing all of the service accounts including the one that was just created. Click the three dots to the right of the service account you just created. Then select Manage Keys in the dropdown.


In the Keys dashboard, click ADD KEY and then select Create new key.


In the Create private key dialog box, make sure Key type is set to JSON, and then click the CREATE button.

***********************************************************************************
docker run -it -v $(pwd):/app ruby sh
gem install travis

The Travis login now requires a Github Token. Please follow these instructions to create a Personal Token for Travis to use here:

https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token

This will also require setting the scope. Travis requires the permissions noted here:

https://docs.travis-ci.com/user/github-oauth-scopes/#repositories-on-httpstravis-cicom-private-and-public

The login command will now look like this:

travis login --github-token YOUR_PERSONAL_TOKEN --com

or

travis login --github-token YOUR_PERSONAL_TOKEN --pro

When you encrypt the file, you must pass the same --com or --pro flag you used to log in:

travis encrypt-file service-account.json -r USERNAME/REPO --com

or

travis encrypt-file service-account.json -r USERNAME/REPO --pro

If you are getting iv undefined errors, you may have missed passing the --com or --pro flags to both the login and encryption commands. Also, if you still have a .org Travis account these old accounts will need to be migrated to .com ASAP.

Please visit the migration guide here:

https://docs.travis-ci.com/user/migrate/open-source-repository-migration#migrating-a-repository

You can also get an iv undefined error if you've passed the wrong repo to the file encryption or passed a repo name with a typo in it. Please note, after the migration, or after fixing a typo, you'll need to run through the entire encryption process again.
**********************************************************************
helm installation

$ curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
$ chmod 700 get_helm.sh
$ ./get_helm.sh

Ingress Nginx using Helm

helm upgrade --install ingress-nginx ingress-nginx \
  --repo https://kubernetes.github.io/ingress-nginx \
  --namespace ingress-nginx --create-namespace


kubectl get service ingress-nginx-controller --namespace=ingress-nginx

************************************************
deploy.sh
docker build -t majinbisht/multi-client-k8s:latest -t majinbisht/multi-client-k8s:$SHA -f ./client/Dockerfile ./client
docker build -t majinbisht/multi-server-k8s:latest -t majinbisht/multi-server-k8s:$SHA -f ./server/Dockerfile ./server
docker build -t majinbisht/multi-worker-k8s:latest -t majinbisht/multi-worker-k8s:$SHA -f ./worker/Dockerfile ./worker

docker push majinbisht/multi-client-k8s:latest
docker push majinbisht/multi-server-k8s:latest
docker push majinbisht/multi-worker-k8s:latest

docker push majinbisht/multi-client-k8s:$SHA
docker push majinbisht/multi-server-k8s:$SHA
docker push majinbisht/multi-worker-k8s:$SHA

kubectl apply -f k8s
kubectl set image deployments/server-deployment server=majinbisht/multi-server-k8s:$SHA
kubectl set image deployments/client-deployment client=majinbisht/multi-client-k8s:$SHA
kubectl set image deployments/worker-deployment worker=majinbisht/multi-worker-k8s:$SHA
*************************************************
travis build file
sudo: required

services:
  - docker

env:
  global:
    - SHA=$(git rev-parse HEAD)
    - CLOUDSDK_CORE_DISABLE_PROMPTS=1

before_install:
  - export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
  - echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
  - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
  - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
  - sudo apt-get update && sudo apt-get install google-cloud-sdk
    
install: 
  - openssl aes-256-cbc -K $encrypted_9f3b5599b056_key -iv $encrypted_9f3b5599b056_iv -in service-account.json.enc -out service-account.json -d
  - sudo apt-get install -y kubectl
  - gcloud auth activate-service-account --key-file service-account.json --quiet
  - sudo apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
  - gke-gcloud-auth-plugin --version
  - export USE_GKE_GCLOUD_AUTH_PLUGIN=True
  - gcloud config set project multi-container-k8s-410914
  - gcloud config set compute/zone asia-south2-a
  - gcloud container clusters get-credentials multi-cluster
  - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
  - docker build -t majinbisht/react-test -f ./client/Dockerfile.dev ./client

script:
  - docker run -e CI=true majinbisht/react-test npm test

deploy:
  provider: script
  script: bash ./deploy.sh
  on:
    branch: master
*****************************************************************